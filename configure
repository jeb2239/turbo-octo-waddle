#! /bin/sh
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

# This is a shell script and not a Go program because we have to run
# bazel-gopath, and the bazel-gopath tool invokes Bazel on its own.  So, if
# this were a Go program and we wanted to tell users to invoke it with "bazel
# run" as we do for all other tools, bazel-gopath would get stuck because Bazel
# can only run one command at a time.  It's easier for now to just keep this as
# a shell-script so that it's impossible to run it from within Bazel.
#
# TODO(jmmv): Convert to a Go program once bazel-gopath is fixed to not need
# to run Bazel.  (E.g. it could be made to read query outputs from a dependency
# and then have a Bazel genquery rule to supply such data as a dependency.)

set -e

readonly PROGNAME="${0##*/}"
readonly SRCDIR="$(cd "$(dirname "${0}")" && pwd -P)"

err() {
  echo "${PROGNAME}: E: ${@}" 1>&2
  exit 1
}

info() {
  echo "${PROGNAME}: I: ${@}" 1>&2
}

# Installs git hooks into the git directory provided in git_dir.
setup_git() {
  local git_dir="${1}"; shift

  cd "${git_dir}/hooks"
  for hook in ../../admin/pre-commit; do
    info "Installing git hook ${hook##*/}"
    ln -s -f "${hook}" .
  done
  cd - >/dev/null 2>&1
}

setup_vscode() {
  bazel build @bazel_gopath//:bazel-gopath

  # Populate bazel-sandboxfs/ with symlinks to all source files, required later
  # on as targets for the generated gopath.
  bazel build //... --keep_going

  # The glob below is necessary because of
  # https://github.com/bazelbuild/rules_go/issues/1239.  Given that we have
  # done a single build for a single target configuration, we know that the
  # glob will only match one binary.
  ./bazel-bin/external/bazel_gopath/*/bazel-gopath --workspace="$(pwd)"

  {
    echo '// AUTOMATICALLY GENERATED!!!'
    echo '// EDIT settings.json.in INSTEAD'
    sed \
        -e "s,__GOPATH__,$(pwd)/.gopath,g" \
        -e "s,__GOROOT__,$(pwd)/bazel-go_bazel_project/external/go_sdk,g" \
        -e "s,__TOOLS_GOPATH__,$(pwd)/.gopath-tools,g" \
        .vscode/settings.json.in
  } >.vscode/settings.json
}

main() {
  cd "${SRCDIR}"

  local enable_vscode=no
  for arg in "${@}"; do
    case "${arg}" in
      --enable-vscode) enable_vscode=yes ;;
      *) err "Unknown argument ${arg}" ;;
    esac
  done

  # [ -d .git ] && setup_git .git

  setup_vscode
}

main "${@}"
